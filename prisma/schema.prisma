// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    githubLogin      String?
    accounts         Account[]
    sessions         Session[]
    bio              Json               @default("{}")
    handle           String?            @unique
    takes            Take[]
    comments         Comment[]
    alterEgos        AlterEgo[]
    followers        Follow[]           @relation("Follower")
    following        Follow[]           @relation("Following")
    takeReactions    TakeReaction[]
    userInvitations  UserInvitation[]
    userBadges       UserBadge[]
    userNotification UserNotification[]
}

model UserInvitation {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    email       String   @unique
    invitedBy   User     @relation(fields: [invitedById], references: [id])
    invitedById String
    notes       String
    accepted    Boolean  @default(false)
}

model UserBadge {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String
    imageURL    String
    limit       Int
    users       User[]
}

model Follow {
    id               Int                @id @default(autoincrement())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    deletedAt        DateTime?
    user             User               @relation(fields: [userId], references: [id], name: "Follower")
    userId           String
    follower         User               @relation(fields: [followerId], references: [id], name: "Following")
    followerId       String
    userNotification UserNotification[]

    @@unique([followerId, userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model AlterEgo {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    name      String
    handle    String
    image     String
    bio       String
}

model Take {
    id               Int                @id @default(autoincrement())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    createdBy        User               @relation(fields: [createdById], references: [id])
    createdById      String
    content          Json
    imageUrls        String[]
    takeReactions    TakeReaction[]
    comments         Comment[]
    userNotification UserNotification[]
}

model Comment {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    body        String
    imageUrls   String[]
    take        Take?    @relation(fields: [takeId], references: [id])
    takeId      Int?
}

enum TakeReactionType {
    Hot_Take
    Hot_Shit
}

model TakeReaction {
    id          Int              @id @default(autoincrement())
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    type        TakeReactionType
    createdBy   User             @relation(fields: [createdById], references: [id])
    createdById String
    take        Take             @relation(fields: [takeId], references: [id])
    takeId      Int

    // the combination of createdById and takeId must be unique
    @@unique([createdById, takeId], name: "userTake")
}

enum UserNotificationType {
    NewFollower
    NewComment
    NewReaction
}

model UserNotification {
    id               Int                  @id @default(autoincrement())
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
    notificationType UserNotificationType
    take             Take?                @relation(fields: [takeId], references: [id])
    takeId           Int?
    follower         Follow?              @relation(fields: [followerId], references: [id])
    followerId       Int?
    reactionType     TakeReactionType?
    commentBody      String?
    user             User                 @relation(fields: [userId], references: [id])
    userId           String
    readAt           DateTime?
}
