// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    githubLogin   String?
    accounts      Account[]
    sessions      Session[]
    bio           String?
    handle        String?
    takes         Take[]
    comments      Comment[]
    alterEgos     AlterEgo[]
    followers     Follower[]     @relation("Follower")
    following     Follower[]     @relation("Following")
    takeReactions TakeReaction[]
}

model Follower {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    follower    User     @relation(fields: [followerId], references: [id], name: "Follower")
    following   User     @relation(fields: [followingId], references: [id], name: "Following")
    followerId  String
    followingId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model AlterEgo {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    name      String
    handle    String
    image     String
    bio       String
}

model Take {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    createdBy     User           @relation(fields: [createdById], references: [id])
    createdById   String
    content       Json
    imageUrls     String[]
    takeReactions TakeReaction[]
    comments      Comment[]
}

model Comment {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    content     String
    imageUrls   String[]
    take        Take?    @relation(fields: [takeId], references: [id])
    takeId      Int?
}

enum TakeReactionType {
    Hot_Take
    Hot_Shit
}

model TakeReaction {
    id          Int              @id @default(autoincrement())
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    type        TakeReactionType
    createdBy   User             @relation(fields: [createdById], references: [id])
    createdById String
    take        Take             @relation(fields: [takeId], references: [id])
    takeId      Int

    // the combination of createdById and takeId must be unique
    @@unique([createdById, takeId], name: "userTake")
}
